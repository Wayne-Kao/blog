[{"title":"Hexo- 帶你認識Blog框架","url":"/posts/e0a00714.html","content":"<p><img src=\"/images/hexo-introduction/cover.png\" alt=\"Cover\"></p>\n<p>Hexo是一個快速、簡單且強大的blog框架，支援Markdown語法，豐富的主題 (Theme) 與套件 (Plugin) 生態，一般常見的需求都可以滿足，像是文章搜尋、評論系統、文章標籤與分類等，適合有些程式基礎的人，可以快速方便地建置blog。當然，你也可以選擇一步一步調整屬於自己的配置，那麼就好好跟大家介紹一下Hexo吧。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>這次介紹會先從基礎安裝與建置、文章發佈流程與部署陸續介紹，至於細節的設定與套件 (Plugin) 部分，礙於篇幅會另外介紹。</p>\n<p>而同時你需要具備 <code>Node.js</code> 、<code>npm</code> 與 <code>Git</code> 等基本相關知識，細節就不再此說明。</p>\n<h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><p>安裝Hexo之前需要先安裝下列軟體:</p>\n<ul>\n<li><a href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\">Node.js</a></li>\n<li><a href=\"http://git-scm.com\" target=\"_blank\" rel=\"noopener\">Git</a></li>\n</ul>\n<p>※ 具體安裝細節可以參考<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\">Hexo官方文件</a>或是其官方網站說明。</p>\n<p>安裝上述必要軟體後，只需要透過npm命令即可完成Hexo安裝</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>※實際上我們是安裝Hexo的<a href=\"https://zh.wikipedia.org/wiki/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2\" target=\"_blank\" rel=\"noopener\">Command-Line interface</a>，之後就可以透過命令方式執行Hexo。</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>※ <code>hexo init</code> 命令需要指定<strong>空或不存在的資料夾</strong>執行。</p>\n<p>執行成功後，會有以下主要檔案與目錄結構</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── <span class=\"built_in\">source</span></span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"scaffolds-目錄\"><a href=\"#scaffolds-目錄\" class=\"headerlink\" title=\"scaffolds 目錄\"></a>scaffolds 目錄</h3><p>官方翻譯為<strong>鷹架</strong>，類似於模板的概念，預設會有 <code>draft.md</code> 、 <code>post.md</code> 和 <code>page.md</code> 三個scaffold，當我們透過Hexo命令建立檔案時，則會根據 <code>[layout]</code> 參數對應至scaffolds目錄下的模板來建立檔案</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hexo new [layout] &lt;title&gt;</span></span><br><span class=\"line\">$ hexo new page <span class=\"string\">\"About\"</span></span><br></pre></td></tr></table></figure>\n\n<p>在執行上述命令時，Hexo會在scaffolds目錄下，尋找 <code>page.md</code> ，並根據其內容建立檔案，所以我們可以將常用的配置，統一將預設的設定至scaffolds目錄下的模板。</p>\n<h3 id=\"source-目錄\"><a href=\"#source-目錄\" class=\"headerlink\" title=\"source 目錄\"></a>source 目錄</h3><p>此目錄是放置原始檔案與內容的地方，像是文章的md檔或是一些圖片檔案，透過Hexo發佈命令時，會將此目錄下的檔案或目錄生成或複製至 <code>Public</code> 目錄下，大多時候我們都是在這個目錄下操作編輯。</p>\n<p>※ 目錄前綴若是 <code>_</code> (底線)，則會被忽略，不會被複製至  <code>Public</code> 目錄，但是 <code>_posts</code> 目錄是例外。</p>\n<h3 id=\"themes-目錄\"><a href=\"#themes-目錄\" class=\"headerlink\" title=\"themes 目錄\"></a>themes 目錄</h3><p>此目錄是Hexo的主題目錄，Hexo會根據此目錄下的主題來生成靜態檔案。</p>\n<h3 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h3><p>Hexo的配置檔案，大部分設定都在這個檔案，後續文章會再另外介紹。</p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>是一個json格式的文件，主要是用來描述相依的相關套件與應用程式的資訊。</p>\n<h2 id=\"文章發佈流程\"><a href=\"#文章發佈流程\" class=\"headerlink\" title=\"文章發佈流程\"></a>文章發佈流程</h2><p>當我們做完初始化後，就可以開始撰寫文章了，而最基本的流程:</p>\n<ul>\n<li>建立文章</li>\n<li>產生靜態檔案</li>\n<li>啟動伺服器</li>\n<li>部署網站</li>\n</ul>\n<h3 id=\"建立文章\"><a href=\"#建立文章\" class=\"headerlink\" title=\"建立文章\"></a>建立文章</h3><p>建立一篇新的文章，如果標題包含空格時，需要用引號刮起來</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hexo new [layout] &lt;title&gt;</span></span><br><span class=\"line\">$ hexo new <span class=\"string\">\"first post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>執行上述命令後，會產生 <code>first-post.md</code> 檔案至 <code>.\\source\\_posts\\</code> 目錄下，就可以開始撰寫文章內容。</p>\n<p>※ <code>[layout]</code> 如果沒有指定，會使用預設 (post)。</p>\n<h3 id=\"產生靜態檔案\"><a href=\"#產生靜態檔案\" class=\"headerlink\" title=\"產生靜態檔案\"></a>產生靜態檔案</h3><p>Hexo根據主題與 <code>source</code> 目錄的相關檔案，開始解析並產生靜態檔案如 <code>html</code> 至 <code>public</code> 目錄</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"啟動伺服器\"><a href=\"#啟動伺服器\" class=\"headerlink\" title=\"啟動伺服器\"></a>啟動伺服器</h3><p>Hexo本身內建一個網站伺服器，可以讓我們確認靜態檔案生成的結果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>可以直接透過瀏覽器訪問 <code>http://localhost:4000/</code> 。</p>\n<p>※ 可以透過 <code>-p &lt;port&gt;</code> 參數指定Port，預設為4000。</p>\n<h3 id=\"部署網站\"><a href=\"#部署網站\" class=\"headerlink\" title=\"部署網站\"></a>部署網站</h3><p>當我們可以在localhost順利看到我們發佈的文章與內容時，接下來就是將靜態檔案給部署至遠端的伺服器，讓大家都可以看到我們的文章，Hexo本身提供<a href=\"https://hexo.io/zh-tw/docs/one-command-deployment\" target=\"_blank\" rel=\"noopener\">多種</a>部署方式，只要安裝對應的套件即可，而我們就以<strong>Git</strong>為例:</p>\n<ol>\n<li><p>需要安裝對應的套件<a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">hexo-deployer-git</a>:</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 <code>_config.yml</code> 檔案設定</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: &lt;repository url&gt; <span class=\"comment\"># https://github.com/&lt;user name&gt;/&lt;repository name&gt;.git</span></span><br><span class=\"line\">  branch: [branch] <span class=\"comment\"># 可設定分支，例如master，GitHub預設為gh-pages</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上傳檔案</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean &amp; hexo deploy <span class=\"comment\"># 建立部署前執行clean命令，清除快取</span></span><br></pre></td></tr></table></figure>\n\n<p> ※ 過程可能需要輸入GitHub帳號密碼</p>\n</li>\n</ol>\n<p>通過上面的步驟後，現在應該已經可以在你的GitHub repository看到上傳的靜態檔案，這時候可以結合<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a>的功能，看到屬於你自己的blog囉。</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>介紹到這邊，理論上基本的流程已可以讓我們順利發佈文章，同時部署至GitHub Pages上，所以最陽春的blog已經建立完成，整體流程相當簡單，僅需要有 <code>Node.js</code> 、<code>npm</code> 與 <code>Git</code> 等基本相關知識，相信也應該都難不倒大家，接下來就可以嘗試去修改主題及Hexo相關設定，之後的文章也會陸續介紹，有興趣的可以先動手玩玩了。</p>\n","categories":["Hexo系列文章"],"tags":["Blog","Hexo","GitHub","GitHub Pages"]},{"title":"建立Blog使用 Hexo + GitHub Pages + CircleCI","url":"/posts/32581212.html","content":"<p><img src=\"/images/blog-introduction/cover.png\" alt=\"Cover\"></p>\n<p>一般blog選擇可能是採用線上編輯平台，像是Medium、Blogger、Wordpress等，或是透過靜態網站產生器，像是Hexo、Jekyll、Hugo等，而後來還是偏好後者，主要是彈性比較高，不會受限於線上平台的功能、免費版可能會有廣告或是版型等問題，但也因此靜態網站產生器建置需要一些程式能力，不過剛好是技術blog所以也很符合這樣的精神，而blog產生的靜態網頁則是部署至GitHub Pages，也透過CircleCI整合達到自動建置與部署。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>其實滿久以前就斷斷續續寫過一些blog，不過都沒有持續下去，而最近又開始想要寫些技術文章，所以重新將blog給建置起來，參考網路文章跟建置的架構，最後採用 <code>Hexo</code> + <code>GitHub Pages</code> + <code>CircleCI</code> ，而這樣的架構優點有:</p>\n<ul>\n<li>免費使用</li>\n<li>支援Markdown語法</li>\n<li>版型或設定可自行修改</li>\n<li>性能快速與服務穩定</li>\n<li>自動建置並部署</li>\n</ul>\n<p>不過也不是沒有缺點:</p>\n<ul>\n<li>需要程式基礎</li>\n<li>需要開發環境 (可結合CI/CD解決)</li>\n<li>無動態頁面功能</li>\n</ul>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>之前曾經使用過Jekyll，是基於Ruby開發，不過對於在windows相容性較差些，後來喜歡Hexo是透過Node.js開發，作者Tommy Chen是台灣人，也越來越多人使用Hexo建立自己的blog。Hexo建置快速且生成的網站體積小，發佈文章流程也相對簡單，支援Markdown語法，透過 <code>.md</code> 檔案發佈，未來也可以輕鬆轉移至其他平台。</p>\n<h2 id=\"GitHub-Pages\"><a href=\"#GitHub-Pages\" class=\"headerlink\" title=\"GitHub Pages\"></a>GitHub Pages</h2><p>透過Hexo產生的blog靜態頁面需要有一個網站空間，而除了自己建置或是租用空間外，身為開發人員當然是直接使用GitHub Pages，以GitHub這樣的服務相對來說甚至比一般租用空間還穩定，同時因為將原始碼都透過GitHub做版本控管，也有助於文章的發佈管理，GitHub Pages是免費的，不過仍有些<a href=\"https://help.github.com/en/github/working-with-github-pages/about-github-pages#usage-limits\" target=\"_blank\" rel=\"noopener\">限制</a>，只是一般個人情境使用應該都夠了。</p>\n<h2 id=\"CircleCI\"><a href=\"#CircleCI\" class=\"headerlink\" title=\"CircleCI\"></a>CircleCI</h2><p>為了可以專心在寫作上，所以結合DevOps的精神，採用CircleCI，讓我們可以只要將文章Commit至GitHub後，透過CircleCI自動幫我們建置blog，如此一來我們要是有時候發現錯字，也可以快速在GitHub上編輯即可，把瑣碎的部署工作交給CircleCI。</p>\n<p>另外選擇CircleCI的原因還有因為我將blog原始碼放在Git私人的repository，而像是Travis CI免費版並不支援，但CircleCI免費版每個月也有使用限制，不過如果真的超過限制，我想還可以先透過手動部署撐一下。</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>目前也花了一些時間調整Hexo設定，並使用了滿多人使用的主題NexT，接下來會另外寫文章介紹本blog做了那些設定跟調整，而相關配置也會持續優化，希望可以持續下去這股熱忱，累積更多文章與分享知識。</p>\n","categories":["Hexo系列文章"],"tags":["Blog","Hexo","GitHub","GitHub Pages","CircleCI"]}]