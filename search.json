[{"title":"markdown tutorial","url":"/posts/ffa1546f.html","content":"<p><img src=\"/images/markdown-tutorial/cover.png\" alt=\"Cover\"></p>\n<p>Markdown是一種輕量級標記式語言，主要特性就是<strong>易讀易寫</strong>的純文字格式，在近幾年已經成為多數網站跟平台用來撰寫文件或訊息的支援格式，尤其受到程式設計師與文字作者的青睞，在使用它之前，你應該對它有個基本的認識。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>標記語言(Markup Language)，是一種用來將文字與其他資訊結合一起的語法，但它不算是一種程式語言，而是透過標記方式將額外資訊進行標識，最常見的就是HTML和XML，介於純文字與程式語言之間。而所謂<strong>輕量級</strong>就是相對來說更簡單的語法，更方便地使用，以數據線性化為目標像是JSON或是YAML等，而以表達為目標的則有維基百科的編寫語言Wikipedia(Wiki Markup Language)或今天要介紹的Markdown等。</p>\n<p>對於程式設計師而言，標記語言已經不陌生，而<strong>Markdown</strong>也慢慢成為當前用來撰寫文件或訊息的常見格式，像是GitHub、Trello、Slack、Reddit和Line(電腦版)等平台都支援，也因其簡潔又不失可讀性的特性，部落格相關平台更是將Markdown列為支援格式，儼然成為網路內容寫作的一種主流標記語言。</p>\n<h2 id=\"語法介紹\"><a href=\"#語法介紹\" class=\"headerlink\" title=\"語法介紹\"></a>語法介紹</h2><p>Markdown之所以稱為輕量級，就是因為其語法格式簡單，適合在一般文字內容撰寫，不需要太複雜的格式，不過各平台支援的Markdown格式還是有些差異，還是以各平台為主。</p>\n<p>而Markdown主要分為兩種格式類型，<strong>區塊</strong>與<strong>行內</strong>格式:</p>\n<ul>\n<li>區塊格式: 格式會套用到整個區塊內，像是標題、清單和程式碼區塊等。</li>\n<li>行內格式: 可將格式套用至部份文字，像是粗體、斜體、連結和圖片等。</li>\n</ul>\n<h3 id=\"區塊格式\"><a href=\"#區塊格式\" class=\"headerlink\" title=\"區塊格式\"></a>區塊格式</h3><p>格式會套用到整個區塊內，而區塊內也可以再套用其他語法，像是引言區塊內可以包含標題與程式碼區塊。</p>\n<h4 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h4><p>Markdown中一個文字段落是由一段文字組成，而每個段落中間透過<strong>空行</strong>(blank line)分隔，如果要進行斷行，可以在行末輸入兩個空格。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">段落以空白行分隔。</span><br><span class=\"line\"></span><br><span class=\"line\">第二個段落開始，行末兩個空格  </span><br><span class=\"line\">強制斷行，此行仍屬於第二個段落</span><br></pre></td></tr></table></figure>\n\n<p><strong>顯示結果</strong>:</p>\n<iframe src=\"https://codepen.io/WayneKao/embed/abvOMXz?height=210&theme-id=dark&default-tab=result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h4 id=\"標題\"><a href=\"#標題\" class=\"headerlink\" title=\"標題\"></a>標題</h4><p>標題分為兩種格式: <code>Setext</code> 和 <code>Atx</code> 。</p>\n<p><code>Setext</code> 格式的標題分為兩階，利用 <code>=</code> 表示最高階， <code>-</code> 表示第二階標題，數量多寡不影響。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">標題一</span><br><span class=\"line\">======</span><br><span class=\"line\"></span><br><span class=\"line\">標題二</span><br><span class=\"line\">------</span><br></pre></td></tr></table></figure>\n\n<p><code>Atx</code> 格式則是使用 <code>#</code> 表示，對應1至6階標題。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># Header 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">## Header 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### Header 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">#### Header 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">##### Header 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">###### Header 6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>顯示結果</strong>:</p>\n<iframe src=\"https://codepen.io/WayneKao/embed/RwWPOWj?height=265&theme-id=dark&default-tab=result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h4 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>引言語法與Email中引言一樣，透過在每行文字前加上 <code>&gt;</code> ，也支援多階層引言，只要加上不同數量的 <code>&gt;</code> 即可，不過部份不支援多階層引用。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 第一層引言，第一段落</span></span><br><span class=\"line\">&gt;</span><br><span class=\"line\"><span class=\"quote\">&gt; 第一層引言，第二段落</span></span><br><span class=\"line\">&gt;&gt; 第二層引言</span><br><span class=\"line\">&gt;&gt; 內容</span><br></pre></td></tr></table></figure>\n\n<p><strong>顯示結果</strong>:<br>(Codepen不支援多層引言，以下為Hexo渲染結果)</p>\n<blockquote>\n<p>第一層引言，第一段落</p>\n<p>第一層引言，第二段落</p>\n<blockquote>\n<p>第二層引言<br>內容</p>\n</blockquote>\n</blockquote>\n<h4 id=\"清單\"><a href=\"#清單\" class=\"headerlink\" title=\"清單\"></a>清單</h4><p>清單分為有序與無序清單，無序使用 <code>-</code> 、 <code>+</code> 或 <code>*</code> 標記皆可。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">- </span>項目一</span><br><span class=\"line\"><span class=\"bullet\">- </span>項目二</span><br><span class=\"line\"><span class=\"bullet\">- </span>項目三</span><br></pre></td></tr></table></figure>\n\n<p>有序清單則直接用數字標示即可，這裡數字不一定需要正確，不過仍建議維持正確序號數字。</p>\n<p>清單是區塊格式，區塊內可以還有其他區塊格式，所以可以多層清單使用，有序與無序清單可以混合使用，可以透過縮排(三個空白)來呈現子清單。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1. </span>項目1</span><br><span class=\"line\"><span class=\"bullet\">   - </span>子項目一</span><br><span class=\"line\"><span class=\"bullet\">   - </span>子項目二</span><br><span class=\"line\"><span class=\"bullet\">2. </span>項目2</span><br><span class=\"line\"><span class=\"bullet\">   1. </span>子項目1</span><br><span class=\"line\"><span class=\"bullet\">   2. </span>子項目2</span><br><span class=\"line\"><span class=\"bullet\">3. </span>項目3</span><br></pre></td></tr></table></figure>\n\n<p>區塊格式內還可以有其他區塊格式，如果清單內需要有段落，可以透過四個空白或是一個TAB的方式縮排，達到文字段落的效果。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*   </span>項目內有段落示範</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"code\">    項目內的第二個段落</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">*   </span>這是第二個項目</span><br></pre></td></tr></table></figure>\n\n<p>有時候不一定是使用項目清單，但仍會用到數字與小數點的結合，例如 <code>2020. 年度計畫</code>，則可以加上反斜號 <code>\\</code>，就不會被標示為項目清單。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">2020\\. 年度計畫</span><br></pre></td></tr></table></figure>\n\n<p><strong>顯示結果</strong>:</p>\n<iframe src=\"https://codepen.io/WayneKao/embed/RwWPOox?height=265&theme-id=dark&default-tab=result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h4 id=\"程式碼區塊\"><a href=\"#程式碼區塊\" class=\"headerlink\" title=\"程式碼區塊\"></a>程式碼區塊</h4><p>畢竟Markdown很常在程式相關文件或說明裡運用，所以自然也要提供了程式碼區塊格式，而依平台支援度，甚至提供程式碼高亮的效果，就如程式編輯器般，只要透過四個空白或是一個TAB的方式縮排，就可以使用程式程式碼區塊，本文的範例程式碼就是使用程式碼區塊。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">這是一般文字段落，以下為程式碼區塊</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"code\">    &lt;script&gt;</span></span><br><span class=\"line\"><span class=\"code\">        alert( 'Hello, world!' );</span></span><br><span class=\"line\"><span class=\"code\">    &lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>由於程式碼本身會有縮排，而Markdown又需要透過縮排的方式標示，在使用上不是太方便，因此有了擴充的表示方式，在程式碼區塊第一行與最後一行，使用三個連續的 <code>`</code> 來將程式碼區塊包起來。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"code\">```</span></span><br><span class=\"line\"><span class=\"code\">print(\"Goodbye, World!\")  </span></span><br><span class=\"line\"><span class=\"code\">```</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>顯示結果</strong>:</p>\n<iframe src=\"https://codepen.io/WayneKao/embed/RwWWMZr?height=265&theme-id=dark&default-tab=result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h4 id=\"分隔線\"><a href=\"#分隔線\" class=\"headerlink\" title=\"分隔線\"></a>分隔線</h4><p>可以使用至少三個 <code>*</code> 、 <code>-</code> 或 <code>_</code> 來表示分隔線。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">分隔符號前的文字</span><br><span class=\"line\"><span class=\"emphasis\">***</span></span><br><span class=\"line\">分隔符號後的文字</span><br></pre></td></tr></table></figure>\n\n<p><strong>顯示結果</strong>:</p>\n<iframe src=\"https://codepen.io/WayneKao/embed/gOaajZW?height=265&theme-id=dark&default-tab=result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h3 id=\"行內格式\"><a href=\"#行內格式\" class=\"headerlink\" title=\"行內格式\"></a>行內格式</h3><p>可將格式套用至部份文字可將格式套用至部份文字，像是粗體、斜體、連結和圖片等。</p>\n<h4 id=\"強調\"><a href=\"#強調\" class=\"headerlink\" title=\"強調\"></a>強調</h4><p>用以強調文字用途，基本支援粗體與斜體</p>\n<ul>\n<li>斜體: 使用<strong>一</strong>個 <code>*</code> 或是 <code>_</code> 放在文字前後，不能包含空白。</li>\n<li>粗體: 使用<strong>兩</strong>個 <code>*</code> 或是 <code>_</code> 放在文字前後，不能包含空白。</li>\n<li>粗體與斜體同時: 使用<strong>三</strong>個 <code>*</code> 或是 <code>_</code> 放在文字前後，不能包含空白。</li>\n</ul>\n<p>不過基於各平台支援度，建議只使用 <code>*</code> 符號，閱讀上也較為一致，部分不支援粗體與斜體同時使用，另外如果 <code>*</code> 或是 <code>_</code> 前後放上空白，則會當視為符號。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">需要<span class=\"emphasis\">*斜體*</span>的文字</span><br><span class=\"line\">需要<span class=\"strong\">**粗體**</span>的文字</span><br><span class=\"line\">當純顯示 <span class=\"emphasis\">* 符號 *</span> 沒有效果</span><br></pre></td></tr></table></figure>\n\n<p><strong>顯示結果</strong>:</p>\n<iframe src=\"https://codepen.io/WayneKao/embed/ZEbbMLg?height=265&theme-id=dark&default-tab=result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h4 id=\"連結\"><a href=\"#連結\" class=\"headerlink\" title=\"連結\"></a>連結</h4><p>如果要顯示連結，需要在 <code>[]</code> 符號後緊接著 <code>()</code> 並插入對應標題與網址即可。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">我的部落格[<span class=\"string\">連結</span>](<span class=\"link\">https://blog.icoding.tw</span>)，歡迎大家瀏覽。</span><br></pre></td></tr></table></figure>\n\n<p>另外也可以在連結上加上標題，只要在網址後面再加上標題，並透過雙引號 <code>&quot;</code> 前後包起來。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">我的部落格[<span class=\"string\">連結</span>](<span class=\"link\">https://blog.icoding.tw \"iCoding blog\"</span>)，歡迎大家瀏覽。</span><br></pre></td></tr></table></figure>\n\n<p>快速使用連結，可以使用 <code>&lt;&gt;</code> 直接將連結放入其中，尤其有時候需要顯示email信箱時特別方便。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">我的個人信箱: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">wayne@icoding.tw</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>顯示結果</strong>:</p>\n<iframe src=\"https://codepen.io/WayneKao/embed/QWjjVrP?height=265&theme-id=dark&default-tab=result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h4 id=\"圖片\"><a href=\"#圖片\" class=\"headerlink\" title=\"圖片\"></a>圖片</h4><p>圖片用法基本上與連結雷同，僅需要在其前面加上 <code>!</code> ，不過基本上圖片就僅是插入一張圖片，，因輕量級標記式語言，不支援複雜設定，如長寬等，如需要可以也直接使用html語法。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">Logo</span>](<span class=\"link\">https://blog.icoding.tw/images/logo260.png \"iCoding\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>顯示結果</strong>:</p>\n<iframe src=\"https://codepen.io/WayneKao/embed/KKddxOw?height=265&theme-id=dark&default-tab=result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h4 id=\"行內程式碼\"><a href=\"#行內程式碼\" class=\"headerlink\" title=\"行內程式碼\"></a>行內程式碼</h4><p>有時候在文字描述時，會順便包含程式碼格式的文字，這時候可以使用 <code>`</code> 單引號包在程式碼文字前後。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用Git指令<span class=\"code\">`git clone`</span>下載程式碼</span><br></pre></td></tr></table></figure>\n\n<p><strong>顯示結果</strong>:</p>\n<iframe src=\"https://codepen.io/WayneKao/embed/OJyyBRY?height=265&theme-id=dark&default-tab=result\" width=\"100%\" height=\"300\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe>\n\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>介紹了基本的Markdown語言用法，在主流的平台上可以方便又快速書寫，不過各平台仍有自己擴充的語法，部分支援度也有所差異，有時間另外說明一些<a href=\"https://meta.stackexchange.com/questions/82718/how-do-i-escape-a-backtick-within-in-line-code-in-markdown\" target=\"_blank\" rel=\"noopener\">進階用法</a>跟<a href=\"https://www.markdownguide.org/basic-syntax/#heading-best-practices\" target=\"_blank\" rel=\"noopener\" title=\"heading best practices\">最佳實踐</a>，不過在這之前，有機會不妨趕緊試試看Markdown帶來的書寫體驗吧。</p>\n<hr>\n<p>References:</p>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80\" target=\"_blank\" rel=\"noopener\">維基百科-輕量級標記語言</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\" rel=\"noopener\">維基百科-Markdown</a></li>\n<li><a href=\"https://www.markdownguide.org/\" target=\"_blank\" rel=\"noopener\">Markdown Guide</a></li>\n<li><a href=\"https://markdown.tw/\" target=\"_blank\" rel=\"noopener\">Markdown文件</a></li>\n<li><a href=\"https://wcc723.github.io/development/2019/11/23/ten-mins-learn-markdown/\" target=\"_blank\" rel=\"noopener\">十分鐘快速掌握 Markdown</a></li>\n</ul>\n","tags":["Markdown"]},{"title":"Hexo- 帶你認識Blog框架","url":"/posts/e0a00714.html","content":"<p><img src=\"/images/hexo-introduction/cover.png\" alt=\"Cover\"></p>\n<p>Hexo是一個快速、簡單且強大的blog框架，支援Markdown語法，豐富的主題 (Theme) 與套件 (Plugin) 生態，一般常見的需求都可以滿足，像是文章搜尋、評論系統、文章標籤與分類等，適合有些程式基礎的人，可以快速方便地建置blog。當然，你也可以選擇一步一步調整屬於自己的配置，那麼就好好跟大家介紹一下Hexo吧。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>這次介紹會先從基礎安裝與建置、文章發佈流程與部署陸續介紹，至於細節的設定與套件 (Plugin) 部分，礙於篇幅會另外介紹。</p>\n<p>而同時你需要具備 <code>Node.js</code> 、<code>npm</code> 與 <code>Git</code> 等基本相關知識，細節就不再此說明。</p>\n<h2 id=\"安裝\"><a href=\"#安裝\" class=\"headerlink\" title=\"安裝\"></a>安裝</h2><p>安裝Hexo之前需要先安裝下列軟體:</p>\n<ul>\n<li><a href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\">Node.js</a></li>\n<li><a href=\"http://git-scm.com\" target=\"_blank\" rel=\"noopener\">Git</a></li>\n</ul>\n<p>※ 具體安裝細節可以參考<a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"noopener\">Hexo官方文件</a>或是其官方網站說明。</p>\n<p>安裝上述必要軟體後，只需要透過npm命令即可完成Hexo安裝</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>※實際上我們是安裝Hexo的<a href=\"https://zh.wikipedia.org/wiki/%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2\" target=\"_blank\" rel=\"noopener\">Command-Line interface</a>，之後就可以透過命令方式執行Hexo。</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>※ <code>hexo init</code> 命令需要指定<strong>空或不存在的資料夾</strong>執行。</p>\n<p>執行成功後，會有以下主要檔案與目錄結構</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── <span class=\"built_in\">source</span></span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"scaffolds-目錄\"><a href=\"#scaffolds-目錄\" class=\"headerlink\" title=\"scaffolds 目錄\"></a>scaffolds 目錄</h3><p>官方翻譯為<strong>鷹架</strong>，類似於模板的概念，預設會有 <code>draft.md</code> 、 <code>post.md</code> 和 <code>page.md</code> 三個scaffold，當我們透過Hexo命令建立檔案時，則會根據 <code>[layout]</code> 參數對應至scaffolds目錄下的模板來建立檔案</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hexo new [layout] &lt;title&gt;</span></span><br><span class=\"line\">$ hexo new page <span class=\"string\">\"About\"</span></span><br></pre></td></tr></table></figure>\n\n<p>在執行上述命令時，Hexo會在scaffolds目錄下，尋找 <code>page.md</code> ，並根據其內容建立檔案，所以我們可以將常用的配置，統一將預設的設定至scaffolds目錄下的模板。</p>\n<h3 id=\"source-目錄\"><a href=\"#source-目錄\" class=\"headerlink\" title=\"source 目錄\"></a>source 目錄</h3><p>此目錄是放置原始檔案與內容的地方，像是文章的md檔或是一些圖片檔案，透過Hexo發佈命令時，會將此目錄下的檔案或目錄生成或複製至 <code>Public</code> 目錄下，大多時候我們都是在這個目錄下操作編輯。</p>\n<p>※ 目錄前綴若是 <code>_</code> (底線)，則會被忽略，不會被複製至  <code>Public</code> 目錄，但是 <code>_posts</code> 目錄是例外。</p>\n<h3 id=\"themes-目錄\"><a href=\"#themes-目錄\" class=\"headerlink\" title=\"themes 目錄\"></a>themes 目錄</h3><p>此目錄是Hexo的主題目錄，Hexo會根據此目錄下的主題來生成靜態檔案。</p>\n<h3 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h3><p>Hexo的配置檔案，大部分設定都在這個檔案，後續文章會再另外介紹。</p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>是一個json格式的文件，主要是用來描述相依的相關套件與應用程式的資訊。</p>\n<h2 id=\"文章發佈流程\"><a href=\"#文章發佈流程\" class=\"headerlink\" title=\"文章發佈流程\"></a>文章發佈流程</h2><p>當我們做完初始化後，就可以開始撰寫文章了，而最基本的流程:</p>\n<ul>\n<li>建立文章</li>\n<li>產生靜態檔案</li>\n<li>啟動伺服器</li>\n<li>部署網站</li>\n</ul>\n<h3 id=\"建立文章\"><a href=\"#建立文章\" class=\"headerlink\" title=\"建立文章\"></a>建立文章</h3><p>建立一篇新的文章，如果標題包含空格時，需要用引號刮起來</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># hexo new [layout] &lt;title&gt;</span></span><br><span class=\"line\">$ hexo new <span class=\"string\">\"first post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>執行上述命令後，會產生 <code>first-post.md</code> 檔案至 <code>.\\source\\_posts\\</code> 目錄下，就可以開始撰寫文章內容。</p>\n<p>※ <code>[layout]</code> 如果沒有指定，會使用預設 (post)。</p>\n<h3 id=\"產生靜態檔案\"><a href=\"#產生靜態檔案\" class=\"headerlink\" title=\"產生靜態檔案\"></a>產生靜態檔案</h3><p>Hexo根據主題與 <code>source</code> 目錄的相關檔案，開始解析並產生靜態檔案如 <code>html</code> 至 <code>public</code> 目錄</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"啟動伺服器\"><a href=\"#啟動伺服器\" class=\"headerlink\" title=\"啟動伺服器\"></a>啟動伺服器</h3><p>Hexo本身內建一個網站伺服器，可以讓我們確認靜態檔案生成的結果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>可以直接透過瀏覽器訪問 <code>http://localhost:4000/</code> 。</p>\n<p>※ 可以透過 <code>-p &lt;port&gt;</code> 參數指定Port，預設為4000。</p>\n<h3 id=\"部署網站\"><a href=\"#部署網站\" class=\"headerlink\" title=\"部署網站\"></a>部署網站</h3><p>當我們可以在localhost順利看到我們發佈的文章與內容時，接下來就是將靜態檔案給部署至遠端的伺服器，讓大家都可以看到我們的文章，Hexo本身提供<a href=\"https://hexo.io/zh-tw/docs/one-command-deployment\" target=\"_blank\" rel=\"noopener\">多種</a>部署方式，只要安裝對應的套件即可，而我們就以<strong>Git</strong>為例:</p>\n<ol>\n<li><p>需要安裝對應的套件<a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">hexo-deployer-git</a>:</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 <code>_config.yml</code> 檔案設定</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: &lt;repository url&gt; <span class=\"comment\"># https://github.com/&lt;user name&gt;/&lt;repository name&gt;.git</span></span><br><span class=\"line\">  branch: [branch] <span class=\"comment\"># 可設定分支，例如master，GitHub預設為gh-pages</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上傳檔案</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean &amp; hexo deploy <span class=\"comment\"># 建立部署前執行clean命令，清除快取</span></span><br></pre></td></tr></table></figure>\n\n<p> ※ 過程可能需要輸入GitHub帳號密碼</p>\n</li>\n</ol>\n<p>通過上面的步驟後，現在應該已經可以在你的GitHub repository看到上傳的靜態檔案，這時候可以結合<a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">GitHub Pages</a>的功能，看到屬於你自己的blog囉。</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>介紹到這邊，理論上基本的流程已可以讓我們順利發佈文章，同時部署至GitHub Pages上，所以最陽春的blog已經建立完成，整體流程相當簡單，僅需要有 <code>Node.js</code> 、<code>npm</code> 與 <code>Git</code> 等基本相關知識，相信也應該都難不倒大家，接下來就可以嘗試去修改主題及Hexo相關設定，之後的文章也會陸續介紹，有興趣的可以先動手玩玩了。</p>\n","categories":["Hexo系列文章"],"tags":["Blog","Hexo","GitHub","GitHub Pages"]},{"title":"建立Blog使用 Hexo + GitHub Pages + CircleCI","url":"/posts/32581212.html","content":"<p><img src=\"/images/blog-introduction/cover.png\" alt=\"Cover\"></p>\n<p>一般blog選擇可能是採用線上編輯平台，像是Medium、Blogger、Wordpress等，或是透過靜態網站產生器，像是Hexo、Jekyll、Hugo等，而後來還是偏好後者，主要是彈性比較高，不會受限於線上平台的功能、免費版可能會有廣告或是版型等問題，但也因此靜態網站產生器建置需要一些程式能力，不過剛好是技術blog所以也很符合這樣的精神，而blog產生的靜態網頁則是部署至GitHub Pages，也透過CircleCI整合達到自動建置與部署。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>其實滿久以前就斷斷續續寫過一些blog，不過都沒有持續下去，而最近又開始想要寫些技術文章，所以重新將blog給建置起來，參考網路文章跟建置的架構，最後採用 <code>Hexo</code> + <code>GitHub Pages</code> + <code>CircleCI</code> ，而這樣的架構優點有:</p>\n<ul>\n<li>免費使用</li>\n<li>支援Markdown語法</li>\n<li>版型或設定可自行修改</li>\n<li>性能快速與服務穩定</li>\n<li>自動建置並部署</li>\n</ul>\n<p>不過也不是沒有缺點:</p>\n<ul>\n<li>需要程式基礎</li>\n<li>需要開發環境 (可結合CI/CD解決)</li>\n<li>無動態頁面功能</li>\n</ul>\n<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>之前曾經使用過Jekyll，是基於Ruby開發，不過對於在windows相容性較差些，後來喜歡Hexo是透過Node.js開發，作者Tommy Chen是台灣人，也越來越多人使用Hexo建立自己的blog。Hexo建置快速且生成的網站體積小，發佈文章流程也相對簡單，支援Markdown語法，透過 <code>.md</code> 檔案發佈，未來也可以輕鬆轉移至其他平台。</p>\n<h2 id=\"GitHub-Pages\"><a href=\"#GitHub-Pages\" class=\"headerlink\" title=\"GitHub Pages\"></a>GitHub Pages</h2><p>透過Hexo產生的blog靜態頁面需要有一個網站空間，而除了自己建置或是租用空間外，身為開發人員當然是直接使用GitHub Pages，以GitHub這樣的服務相對來說甚至比一般租用空間還穩定，同時因為將原始碼都透過GitHub做版本控管，也有助於文章的發佈管理，GitHub Pages是免費的，不過仍有些<a href=\"https://help.github.com/en/github/working-with-github-pages/about-github-pages#usage-limits\" target=\"_blank\" rel=\"noopener\">限制</a>，只是一般個人情境使用應該都夠了。</p>\n<h2 id=\"CircleCI\"><a href=\"#CircleCI\" class=\"headerlink\" title=\"CircleCI\"></a>CircleCI</h2><p>為了可以專心在寫作上，所以結合DevOps的精神，採用CircleCI，讓我們可以只要將文章Commit至GitHub後，透過CircleCI自動幫我們建置blog，如此一來我們要是有時候發現錯字，也可以快速在GitHub上編輯即可，把瑣碎的部署工作交給CircleCI。</p>\n<p>另外選擇CircleCI的原因還有因為我將blog原始碼放在Git私人的repository，而像是Travis CI免費版並不支援，但CircleCI免費版每個月也有使用限制，不過如果真的超過限制，我想還可以先透過手動部署撐一下。</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>目前也花了一些時間調整Hexo設定，並使用了滿多人使用的主題NexT，接下來會另外寫文章介紹本blog做了那些設定跟調整，而相關配置也會持續優化，希望可以持續下去這股熱忱，累積更多文章與分享知識。</p>\n","categories":["Hexo系列文章"],"tags":["Blog","Hexo","GitHub","GitHub Pages","CircleCI"]}]